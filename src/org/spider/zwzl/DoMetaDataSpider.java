package org.spider.zwzl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.spider.util.DateUtil;
import org.spider.zwzl.exception.NotFoundDetailPageException;
import org.spider.zwzl.helper.LoginHelper;
import org.spider.zwzl.helper.PageHelper;
import org.spider.zwzl.helper.QuickHelper;

public class DoMetaDataSpider {

	/**
	 * 元数据 爬虫主程序
	 * @param args
	 */
	public static void main(String[] args) {
		// 挂了重启查询数据库 并且重启爬虫 重启爬虫的时候的记录日志信息 并且打印

		// cookie 失效后还得重新生成cookie
		String loginCookie = LoginHelper.doLogin();
		startSpider(loginCookie);
	}

	/**
	 * 爬虫程序启动
	 */
	private static void startSpider(String loginCookie) {
		// 动态生成查询条件 然后不断的去爬

		List<String> dates = DateUtil.autoGenerateDateArray(DateUtil.getDateFormat(Constants.META_DATA_END_DATE), Constants.META_DATA_DATE_INTERVAL, DateUtil.getDateFormat(Constants.META_DATA_START_DATE), new ArrayList<String>());

		// 爬取指定日期范围的所有记录
		for (String date : dates) {
			String zhuanliListHtml = QuickHelper.getQuickListPage(loginCookie, date);

			spiderListPage(zhuanliListHtml, loginCookie, date);
		}
	}

	/**
	 * 爬取列表页
	 * @param listHtml
	 * @param loginCookie
	 */
	private static void spiderListPage(String listHtml, String loginCookie, String queryBy) {
		Document listPage = Jsoup.parse(listHtml);
		Element mianListContent = listPage.getElementById("notStat2");

		Elements allHref = mianListContent.select("a[href]");
		Element nextHref = null;

		List<String> details = new ArrayList<String>();

		// 找到了下页 链接 和当前页的所有详情
		for (Element element : allHref) {
			String childNodeValue = element.childNode(0).toString().trim();

			if (childNodeValue.equals("[尾页]") || childNodeValue.equals("[下一页]") || childNodeValue.equals("[上一页]") || childNodeValue.equals("[首页]")) {
				if (childNodeValue.equals("[下一页]")) {
					nextHref = element;
				}
			} else {
				String detail = element.attr("href").substring(element.attr("href").lastIndexOf("(") + 2, element.attr("href").lastIndexOf(")") - 1);
				details.add(detail);
			}
		}

		spiderDetailPage(loginCookie, details, queryBy);

		// 获取 recordtotal sWriteDBQuery  20170807-20170808
		if (nextHref != null) {
			String nextHrefValue = nextHref.attr("onclick").toString();
			String currentPage = nextHrefValue.substring(nextHrefValue.indexOf("currPage=") + 9, nextHrefValue.lastIndexOf("\";"));
System.out.println("开始爬取第：" + currentPage + "页");

			String recordtotal = listPage.getElementById("recordtotal").val();

			// 继续爬下页
			String nextPage = PageHelper.queryNextPage(loginCookie, currentPage, queryBy, recordtotal);
			spiderListPage(nextPage, loginCookie, queryBy);
System.out.println("第：" + currentPage + "页爬取结束");
		} else {
			// 列表爬取完成 返回 重新生成查询条件
			return;
		}
	}

	/**
	 * 爬取所有详情页
	 */
	private static void spiderDetailPage(String loginCookie, List<String> details, String queryBy) {
		for (String detail : details) {
			try {
				try {
					// 爬一个详情页 睡眠一秒钟
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				spiderOneDetailPage(loginCookie, detail, Constants.DEFAULT_FAIL_COUNT);
			} catch (NotFoundDetailPageException e) {
				// 找不到详情页 跳到下一页
				try {
					// 睡眠两秒
					Thread.sleep(2000);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
				System.out.println("当前详情页无法获取,跳过:");
				continue;
			}
		}
	}

	/**
	 * 爬取一张详情页
	 * @param loginCookie
	 * @param detail
	 * @param faileTimes
	 */
	private static void spiderOneDetailPage(String loginCookie, String detail, int faileTimes) throws NotFoundDetailPageException {
		long startTime = System.currentTimeMillis();
		System.out.println("爬取元数据：");
		Document detailDoc = Jsoup.parse(QuickHelper.getDetailPage(detail, loginCookie));
		Element detailContent = detailDoc.getElementById("detailCont");

		if (detailContent != null) {
			Elements tds = detailContent.getElementsByTag("td");
			Map<String, String> params = new LinkedHashMap<String, String>();

			params.put("sqh", tds.get(1).childNode(0).toString());
			for (Element element : tds) {
				if (element.attr("id") != null && element.attr("id") != "") {
					params.put(element.attr("id"), element.childNode(0).toString());
				}
			}

			// TODO 保存 params 中的元数据
			System.out.println(params);

			System.out.println("爬取结束, 耗时：" + (System.currentTimeMillis() - startTime) + "毫秒");
		} else {
			if (faileTimes >= Constants.MAX_FAIL_COUNT) {
				throw new NotFoundDetailPageException();
			} else {
				System.out.println("detailContent:为空 , 正在重试:当前第 " + faileTimes + " 次");
				faileTimes += 1;
				spiderOneDetailPage(loginCookie, detail, faileTimes);
			}
		}
	}
}
